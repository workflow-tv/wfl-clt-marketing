name: Publish Release

on: 
  release:
    types: [released]

env:
  VERSION: 1
  BUILD_NUMBER: ${{ github.run_number }}
  # ENABLE_LIBRARY: false
  # ENABLE_DOCKER: true
 # VERSION: "0.0.1"
jobs:
  debug-build:
    name: Debug Build
    uses: workflow-tv/wfl-clt-marketing/.github/workflows/_debug_build.yaml@release/v0
    with:
      enabled: true

  send-workflow-started-notifications:
    name: Send Workflow Started Notifications
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/notify-slack

  publish-release-artifacts:
    uses: workflow-tv/wfl-clt-marketing/.github/workflows/_publish_packages.yaml@release/v0
    with:
      release-track: public
      version-tag: ${{ github.ref_name }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
      pa-token: ${{ secrets.GH_ACCESS_TOKEN }}

  send-workflow-completed-notifications:
    name: Send Build Completed Notifications
    runs-on: ubuntu-latest
    needs:
      - publish-release-artifacts
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/notify-slack
        
  # publish-helm-chart:
  #   name: Publish Helm Chart
  #   runs-on: ubuntu-latest
  #   needs: [package-docker]
  #   steps:
  #     - name: Download Helm Chart
  #       uses: dsaltares/fetch-gh-release-asset@master
  #       with:
  #         token: ${{ secrets.GH_ACCESS_TOKEN }}
  #         repo: ${{ github.repository }}
  #         version: ${{ github.event.release.id }}
  #         file: "nginx.tar.gz"
  #         target: "nginx.tar.gz"

  # publish-docker-hub:
  #   name: Publish Docker Image To Docker Hub
  #   runs-on: ubuntu-latest
  #   needs: [package-docker]
  #   steps:
  #     - name: Download Docker Image
  #       uses: dsaltares/fetch-gh-release-asset@master
  #       with:
  #         token: ${{ secrets.GH_ACCESS_TOKEN }}
  #         repo: ${{ github.repository }}
  #         version: ${{ github.event.release.id }}
  #         file: "nginx.tar.gz"
  #         target: "nginx.tar.gz"
          
  #     - name: Load Image
  #       run: docker load -i nginx.tar.gz

  #     - name: Tag Image
  #       run: docker images

  # publish-play-store:
  #   name: Publish Application to Google Play Store
  #   runs-on: ubuntu-latest
  #   needs: [package-android]
  #   steps:
  #     - name: Download Google Android App Buildle Artifact
  #       uses: dsaltares/fetch-gh-release-asset@master
  #       with:
  #         token: ${{ secrets.GH_ACCESS_TOKEN }}
  #         repo: ${{ github.repository }}
  #         version: ${{ github.event.release.id }}
  #         file: "nginx.tar.gz"
  #         target: "nginx.tar.gz"

  #     - name: Publish to Google Play Store
  #       id: publish-playstore
  #       uses: ./.github/actions/publish-playstore

  # publish-app-store:
  #   name: Publish Application to Apple App Store
  #   runs-on: ubuntu-latest
  #   needs: [package-ios]
  #   steps:
  #     - name: Download Apple IOS App Artifact
  #       uses: dsaltares/fetch-gh-release-asset@master
  #       with:
  #         token: ${{ secrets.GH_ACCESS_TOKEN }}
  #         repo: ${{ github.repository }}
  #         version: ${{ github.event.release.id }}
  #         file: "nginx.tar.gz"
  #         target: "nginx.tar.gz"

  #     - name: Publish to Apple App Store
  #       id: package-appstore
  #       uses: ./.github/actions/publish-appstore

  # publish-app-gallery:
  #   name: Publish Application to Huawei App Gallery
  #   runs-on: ubuntu-latest
  #   needs: [package-android]
  #   steps:
  #     - name: Download Huawei App Bundle Artifact
  #       uses: dsaltares/fetch-gh-release-asset@master
  #       with:
  #         token: ${{ secrets.GH_ACCESS_TOKEN }}
  #         repo: ${{ github.repository }}
  #         version: ${{ github.event.release.id }}
  #         file: "nginx.tar.gz"
  #         target: "nginx.tar.gz"

  #     - name: Publish to Huawei App Gallery
  #       id: publish-appgallery
  #       uses: ./.github/actions/publish-appgallery

  # notify-jira:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "package-web"
  